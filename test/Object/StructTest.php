<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-05 at 14:59:36.
 */

/** 
 * Класс-обертка для тестируемого класса Object_Struct.
 * 
 * Тестируется возможность установки и получения свойств 
 * и непосредственно и через методы 
 * get_$property(), set_$property($value) и 
 * установка свойства с помощью вызова метода с именем свойства.
 * 
 * Для реализации таких методов и нужен этот класс-обертка.
 */
class Object_Struct_for_Test extends Object_Struct 
{
	/**
	 * для установки и получения непосредственно
	 */
	public $prop1;
	
	/**
	 * для установки и получения через методы
	 */
	private $prop2;
	
	public function set_prop2($value)
	{
		$this->prop2 = $value;
		return $this;
	}

	public function get_prop2()
	{
		return $this->prop2;
	}
}

/**
 * Для тестирования метода Object_Struct::equals
 */
class Object_Struct_for_Test1 extends Object_Struct 
{
	public $prop1;
	private $prop2;
	protected $prop3;
}

class Object_StructTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Object_Struct
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Object_Struct_for_Test;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Object_Struct::__get
     */
    public function test__get()
    {
		$this->assertEquals('value1',$this->object->prop1 = 'value1');
		$this->assertEquals('value2',$this->object->prop2 = 'value2');
    }

    /**
     * @expectedException Core_MissingPropertyException
     */
    public function test__getFailure()
    {
		$this->assertNotEquals('value2',$this->object->prop3 = 'value2');
	}

    /**
     * @covers Object_Struct::__set
     */
    public function test__set()
    {
		$this->assertEquals('value1',$this->object->prop1 = 'value1');
		$this->assertEquals('value2',$this->object->prop2 = 'value2');
		
		$this->assertInstanceOf('Object_Struct_for_Test',$this->object->__set('prop2','value2'));
    }

    /**
     * @expectedException Core_MissingPropertyException
     */
    public function test__setFailure()
    {
		$this->assertNotEquals('value2',$this->object->prop3 = 'value2');
	}
	
    /**
     * @covers Object_Struct::__isset
     */
    public function test__isset()
    {
		$this->assertEquals('value1',$this->object->prop1 = 'value1');
		$this->assertTrue(isset($this->object->prop1));

		$this->assertEquals('value2',$this->object->prop2 = 'value2');
		$this->assertTrue(isset($this->object->prop2));
    }

    /**
     * @covers Object_Struct::__unset
     */
    public function test__unset()
    {
		$this->assertEquals('value1',$this->object->prop1 = 'value1');
		$this->assertInstanceOf('Object_Struct_for_Test',$this->object->__unset('prop1'));
		$this->assertFalse(isset($this->object->prop1));

		$this->assertEquals('value2',$this->object->prop2 = 'value2');
		$this->assertInstanceOf('Object_Struct_for_Test',$this->object->__unset('prop2'));
		$this->assertFalse(isset($this->object->prop2));

    }

    /**
     * @expectedException Core_MissingPropertyException
     */
    public function test__unsetFailure()
    {
		$this->assertNotInstanceOf('Object_Struct_for_Test',$this->object->__unset('prop'));
	}

    /**
     * @covers Object_Struct::__call
     */
    public function test__call()
    {
		$this->assertInstanceOf('Object_Struct_for_Test',$this->object->prop1('value3'));
		$this->assertEquals('value3',$this->object->prop1);

		$this->assertInstanceOf('Object_Struct_for_Test',$this->object->prop2('value3'));
		$this->assertEquals('value3',$this->object->prop2);
    }

    /**
     * @covers Object_Struct::equals
     */
    public function testEquals()
    {
		$this->assertFalse($this->object->equals($this));
		$this->assertFalse($this->object->equals(new Object_Struct));
		$this->assertFalse($this->object->equals(new Object_Struct_for_Test1));
		$this->assertTrue($this->object->equals($this->object));
    }
}
