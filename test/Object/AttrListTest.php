<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-05 at 14:58:31.
 */
class Object_AttrListTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Object_AttrList
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Object_AttrList;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Object_AttrList::extend
     */
    public function testExtend()
    {
		$this->assertInstanceOf('Object_AttrList',new Object_AttrList);
    }

	/**
     * @expectedException Core_InvalidArgumentValueException
     */
    public function testExtendFailure()
    {
		$this->assertInstanceOf('Object_AttrList',$this->object->extend($this->object));
    }

    /**
     * @covers Object_AttrList::getIterator
     */
    public function testGetIterator()
    {
		$this->assertInstanceOf('AppendIterator',$this->object->getIterator());
    }

    /**
     * @covers Object_AttrList::object
     */
    public function testObject()
    {
		$name = 'name1';
		$type = 'type1';
		$a = array('key1' => 'val1','key2' => 'val2','key3' => array('key1' => 'val1','key2' => 'val2'));

		$this->assertInstanceOf('Object_AttrList',$this->object->object($name,$type,$a));
		
		$iterator = $this->object->getIterator();
		foreach ($iterator as $k => $v) 
		{
			//var_dump($v);
			
			$this->assertEquals($name,$k);
			$this->assertInstanceOf('Object_ObjectAttribute',$v);
			$this->assertTrue($v->is_object());
			$this->assertFalse($v->is_value());
			$this->assertFalse($v->is_collection());
			
			$this->assertEquals($v->name,$k);
			$this->assertEquals($v->type,$type);
			
		}
    }

    /**
     * @covers Object_AttrList::collection
     */
    public function testCollection()
    {
		$name = 'name1';
		$type = 'type1';
		$a = array('key1' => 'val1','key2' => 'val2','key3' => array('key1' => 'val1','key2' => 'val2'));

		$this->assertInstanceOf('Object_AttrList',$this->object->collection($name,$type,$a));
		
		$iterator = $this->object->getIterator();
		foreach ($iterator as $k => $v) 
		{
			//var_dump($v);
			
			$this->assertEquals($name,$k);
			$this->assertInstanceOf('Object_CollectionAttribute',$v);
			$this->assertFalse($v->is_object());
			$this->assertFalse($v->is_value());
			$this->assertTrue($v->is_collection());
			
			$this->assertEquals($v->name,$k);
			$this->assertEquals($v->items,$type);
			
		}
    }

    /**
     * @covers Object_AttrList::collection
     * @expectedException Core_InvalidArgumentTypeException
     */
    public function testCollectionFailure()
    {
		$name = 'name1';
		$type = 'type1';
		$a = array('key1' => 'val1','key2' => 'val2','key3' => array('key1' => 'val1','key2' => 'val2'));
		$this->object->collection((boolean)$name,$type,$a);
	}
	
    /**
     * @covers Object_AttrList::value
     */
    public function testValueString()
    {
		$name = 'name1';
		$type = 'type1';
		//$a = array('key1' => 'val1','key2' => 'val2','key3' => array('key1' => 'val1','key2' => 'val2'));

		$this->assertInstanceOf('Object_AttrList',$this->object->value($name,$type));
		
		$iterator = $this->object->getIterator();
		foreach ($iterator as $k => $v) 
		{
			//var_dump($v);
			
			$this->assertEquals($name,$k);
			$this->assertInstanceOf('Object_ValueAttribute',$v);
			$this->assertFalse($v->is_object());
			$this->assertTrue($v->is_value());
			$this->assertFalse($v->is_collection());
			
			$this->assertEquals($v->name,$k);
			$this->assertEquals($v->type,$type);
			
		}
    }

    /**
     * @covers Object_AttrList::value
     */
    public function testValueArray()
    {
		$name = 'name1';
		$type = 'type1';
		$a = array('key1' => 'val1','key2' => 'val2','key3' => array('key1' => 'val1','key2' => 'val2'));

		$this->assertInstanceOf('Object_AttrList',$this->object->value($name,$a));
		
		$iterator = $this->object->getIterator();
		foreach ($iterator as $k => $v) 
		{
			//var_dump($v);
			
			$this->assertEquals($name,$k);
			$this->assertInstanceOf('Object_ValueAttribute',$v);
			$this->assertFalse($v->is_object());
			$this->assertTrue($v->is_value());
			$this->assertFalse($v->is_collection());
			
			$this->assertEquals($v->name,$k);
			$this->assertObjectNotHasAttribute('type',$v);
		}
    }

}
