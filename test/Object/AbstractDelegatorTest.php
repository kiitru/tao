<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-07 at 09:51:33.
 */
/**
 * Object_AbstractDelegator - абстрактный, от него наследуются 
 * Object_Aggregator и Object_Listener.
 * Удобнее его протестировать отдельно.
 */
/**
 * @codeCoverageIgnore
 */
class Object_Delegator extends Object_AbstractDelegator
{
	public function get_delegates()
	{
		return $this->delegates;
	}
	
	public function get_classes()
	{
		return $this->classes;
	}
	
	public function get_last_index()
	{
		return $this->last_index;
	}
	
	public function __call($method, $args) {}
}

/**
 * @codeCoverageIgnore
 */
class For_Test
{
}

/**
 * @codeCoverageIgnore
 */
class Object_AbstractDelegatorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Object_AbstractDelegator
     */
    protected $object;
    protected $arr_param = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Object_Delegator($this->arr_param);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

	/**
	 * @expectedException PHPUnit_Framework_Error
	 */
	public function testCreateNotArrayFailure()
	{
		$t = new Object_Delegator((object)$this->arr_param);
	}

	/**
	 * @expectedException Core_InvalidArgumentValueException
	 */
	public function testAppendInstanceFailure()
	{
		$this->object->append(null);
	}

	/**
	 * @expectedException PHPUnit_Framework_Error
	 */
	public function testAppendIndexFailure()
	{
		$this->object->append('For_Test',(object)$this->arr_param);
	}
	
    /**
     * @covers Object_AbstractDelegator::append
     */
    public function testAppend()
    {
		$param = 'For_Test';
		$this->assertInstanceOf('Object_Delegator',$this->object->append($param));
		$this->assertEquals(array($param),$this->object->get_classes());
		$this->assertEquals(1,$this->object->get_last_index());

		
		$param = new stdClass;
		$this->assertInstanceOf('Object_Delegator',$this->object->append($param));
		//var_dump($this->object->get_delegates());
		$this->assertEquals(array('1' => $param),$this->object->get_delegates());
		$this->assertEquals(2,$this->object->get_last_index());
		
		$this->assertEquals(1,count($this->object->get_delegates()));
		$this->assertEquals(1,count($this->object->get_classes()));
    }

    /**
     * @covers Object_AbstractDelegator::remove
     */
    public function testRemove()
    {
		$this->object->append('For_Test');
		$this->object->append(new stdClass);
		$this->assertEquals(1,count($this->object->get_delegates()));
		$this->assertEquals(1,count($this->object->get_classes()));
		
		$this->assertInstanceOf('Object_Delegator',$this->object->remove(0));
		$this->assertEquals(1,count($this->object->get_delegates()));
		$this->assertEquals(0,count($this->object->get_classes()));

		$this->assertInstanceOf('Object_Delegator',$this->object->remove(1));
		$this->assertEquals(0,count($this->object->get_delegates()));
		$this->assertEquals(0,count($this->object->get_classes()));
    }

    /**
     * @covers Object_AbstractDelegator::getIterator
     */
    public function testGetIterator()
    {
		$this->object->append('For_Test');
		$this->object->append(new stdClass);
		$this->assertEquals(1,count($this->object->get_delegates()));
		$this->assertEquals(1,count($this->object->get_classes()));
		
		$this->assertInstanceOf('ArrayIterator',$this->object->getIterator());
		$this->assertEquals(2,count($this->object->get_delegates()));
		$this->assertEquals(0,count($this->object->get_classes()));
    }

    /**
     * @covers Object_AbstractDelegator::offsetGet
     */
    public function testOffsetGet()
    {
		$this->object->append('For_Test');
		$this->object->append(new stdClass);
		$this->assertEquals(1,count($this->object->get_delegates()));
		$this->assertEquals(1,count($this->object->get_classes()));
		
		$this->assertInstanceOf('For_Test',$this->object->offsetGet(0));
		$this->assertInstanceOf('stdClass',$this->object->offsetGet(1));
		
		$this->assertEquals(2,count($this->object->get_delegates()));
		$this->assertEquals(0,count($this->object->get_classes()));
    }

    /**
     * @covers Object_AbstractDelegator::offsetSet
     */
    public function testOffsetSet()
    {
		$this->testAppend();
    }

    /**
     * @covers Object_AbstractDelegator::offsetExists
     */
    public function testOffsetExists()
    {
		$this->object->append('For_Test');
		$this->object->append(new stdClass);
		$this->assertTrue($this->object->offsetExists(0));
		$this->assertTrue($this->object->offsetExists(1));
		$this->assertFalse($this->object->offsetExists(2));

		$this->object->getIterator();
		$this->assertTrue($this->object->offsetExists(0));
		$this->assertTrue($this->object->offsetExists(1));
		$this->assertFalse($this->object->offsetExists(2));
    }

    /**
     * @covers Object_AbstractDelegator::offsetUnset
     */
    public function testOffsetUnset()
    {
		$this->testRemove();
    }
}
