<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-05 at 15:01:10.
 */
/**
 * @codeCoverageIgnore
 */
class Object_Aggregator_for_Test extends Object_Aggregator
{
	public function return_methods()
	{
		return $this->get_private_property_methods();
	}

	public function return_fallback()
	{
		return $this->get_private_property_fallback();
	}
	
	public function get_delegates()
	{
		return $this->delegates;
	}
	
	public function get_classes()
	{
		return $this->classes;
	}
	
	public function get_last_index()
	{
		return $this->last_index;
	}
}

/**
 * @codeCoverageIgnore
 */
class Object_Aggregator_for_Test_1 extends Object_Aggregator
{
	public function func_for_test_call($args)
	{
		return $args;
	}
}

/**
 * @codeCoverageIgnore
 */
class Object_AggregatorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Object_Aggregator
     */
    protected $object;
    protected $fallback;
    protected $arr_param = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Object_Aggregator_for_Test($this->arr_param);
        $this->fallback = new Object_Aggregator($this->arr_param);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Object_Aggregator::fallback_to
     */
    public function testFallback_to()
    {
		$this->assertInstanceOf('Object_Aggregator',$this->object->fallback_to($this->fallback));
		$this->assertInstanceOf('Object_Aggregator',$this->object->return_fallback());
    }

	/**
	 * @expectedException Core_InvalidArgumentValueException
	 */
	public function testFallback_toFailure()
	{
		$this->assertInstanceOf('Object_Aggregator',$this->object->fallback_to($this->object));
	}
	
    /**
     * @covers Object_Aggregator::clear_fallback
     */
    public function testClear_fallback()
    {
		$this->assertInstanceOf('Object_Aggregator',$this->object->clear_fallback());
		$this->assertNull($this->object->return_fallback());
    }

    /**
     * @covers Object_Aggregator::__call
     */
    public function test__call()
    {
		$param = 'args string';

		$this->object->append(new Object_Aggregator_for_Test_1($this->arr_param));
		
		$this->assertEquals($param,$this->object->func_for_test_call($param));
    }

	/**
	 * @expectedException Core_MissingMethodException
	 */
	public function test__callFailure()
	{
		$this->object->append(new Object_Aggregator_for_Test_1($this->arr_param));
		$this->object->func_not_exists();
	}
	
    /**
     * @covers Object_Aggregator::offsetGet
     */
    public function testOffsetGet()
    {
		$this->object->append(new Object_Aggregator_for_Test_1($this->arr_param));
		$this->assertInstanceOf('Object_Aggregator',$this->object->offsetGet(0));
		
		$this->assertInstanceOf('Object_Aggregator_for_Test',$this->object->remove(0));
		
		$this->fallback->append(new Object_Aggregator_for_Test_1($this->arr_param));
		$this->assertInstanceOf('Object_Aggregator',$this->object->fallback_to($this->fallback));
		$this->assertInstanceOf('Object_Aggregator',$this->object->offsetGet(0));
    }

	/**
	 * @expectedException Core_MissingIndexedPropertyException
	 */
	public function testtestOffsetGetFailure()
	{
		$this->object->append(new Object_Aggregator_for_Test_1($this->arr_param));
		$this->assertInstanceOf('Object_Aggregator',$this->object->offsetGet(1));
	}

	/**
	 * @expectedException Core_MissingIndexedPropertyException
	 */
	public function testtestOffsetGetForFallbackFailure()
	{
		$this->assertInstanceOf('Object_Aggregator',$this->object->fallback_to($this->fallback));
		$this->assertInstanceOf('Object_Aggregator',$this->object->offsetGet(0));
	}
	
    /**
     * @codeCoverageIgnore
     */
    public function testOffsetSet()
    {
    }

    /**
     * @covers Object_Aggregator::offsetExists
     */
    public function testOffsetExists()
    {
		
		$this->object->append(new Object_Aggregator_for_Test_1($this->arr_param));
		$this->assertTrue($this->object->offsetExists(0));

		$this->object->remove(0);
		$this->assertFalse($this->object->offsetExists(0));

		$this->object->append(new Object_Aggregator_for_Test_1($this->arr_param));
		//var_dump($this->object);
		$this->assertTrue($this->object->offsetExists(0));
		
		$this->object->clear_fallback();
		$this->assertFalse($this->object->offsetExists(1));
    }

    /**
     * @covers Object_Aggregator::offsetUnset
     */
    public function testOffsetUnset()
    {
		$this->fallback->append(new Object_Aggregator_for_Test_1($this->arr_param));
		$this->object->fallback_to($this->fallback);
		$this->assertTrue($this->object->offsetExists(0));
		
		$this->object->clear_fallback();
		$this->assertFalse($this->object->offsetExists(0));
    }
}
