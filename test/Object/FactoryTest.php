<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-05 at 15:01:38.
 */
class Object_FactoryTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Object_Factory
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Object_Factory;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Object_Factory::map
     * @todo   Implement testMap().
     */
    public function testMapWithArray()
    {
		$a = array('key1' => 'val1', 'key2' => 'val2');
		$this->assertInstanceOf('Object_Factory',$this->object->map($a));

		$a = array('key3' => 'val3', 'key4' => 'val4');
		$this->assertInstanceOf('Object_Factory',$this->object->map($a,'prefix1'));
    }


    /**
     * @covers Object_Factory::map
     * @todo   Implement testMap().
     */
    public function testMapWithStrings()
    {
		$this->assertInstanceOf('Object_Factory',$this->object->map('key5','val5'));
    }

	/**
     * @expectedException Core_InvalidArgumentTypeException
     */
    public function testMapWithString()
    {
		$this->assertInstanceOf('Object_Factory',$this->object->map('key6'));
	}
	
    /**
     * @covers Object_Factory::map_list
     * @todo   Implement testMap_list().
     */
    public function testMap_list()
    {
		$a = array('key1' => 'val1', 'key2' => 'val2');
		$this->assertInstanceOf('Object_Factory',$this->object->map($a));

		$a = array('key3' => 'val3', 'key4' => 'val4');
		$this->assertInstanceOf('Object_Factory',$this->object->map($a,'prefix2'));

		$a = array(
			'key7' => array('key1' => 'val1', 'key2' => 'val2'), 
			'key4' => array('key3' => 'val3', 'key4' => 'val4'));
		$this->assertInstanceOf('Object_Factory',$this->object->map($a));
    }

    /**
     * @covers Object_Factory::new_instance_of
     * @todo   Implement testNew_instance_of().
     */
    public function testNew_instance_of()
    {
		$a = array('class_key' => 'TestNewInstanceOf');
		$this->object->map($a);
		$this->assertInstanceOf(
			'TestNewInstanceOf',
			$this->object->new_instance_of('class_key',array('param_for_construct'))
		);

		$this->assertEquals('aaa',$this->object->class_key()->set('aaa'));
		$this->assertEquals('param_for_construct',$this->object->class_key('param_for_construct')->get());

    }

}

class TestNewInstanceOf
{
	public $param;
	public $param_for_construct;
	
	function __construct($param_for_construct = '')
	{
		$this->param_for_construct = $param_for_construct;
	}
	
	public function get()
	{
		return $this->param_for_construct;
	}
	
	public function set($param = '')
	{
		return $this->param = $param;
	}
	
}
