<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-15 at 14:49:49.
 */
 
class DB_ORM_MapperTest extends DB_ORM_Mapper {
}
 
class DB_ORM_MappingOptionsTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var DB_ORM_MappingOptions
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DB_ORM_MappingOptions();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callClassname()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->classname('DB_ORM_MappingOptions'));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetClassname()
    {
		$this->object->classname('DB_ORM_MappingOptions');
		$this->assertEquals('DB_ORM_MappingOptions', $this->object['classname']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureClassname()
    {
		$this->object->classname('DB_ORM_MappingOptions');
		$this->object->classname;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callColumn()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->column('col1'));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetColumn()
    {
		$this->object->column('col1','col2');
		//var_dump($this->object['columns']);die;
		$this->assertEquals(array('col1'), $this->object['columns']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureColumn()
    {
		$this->object->column('col1');
		$this->object->column;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callValidator()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->validator(new Validation_Validator));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetValidator()
    {
		$this->object->validator(new Validation_Validator);
		$this->assertInstanceOf('Validation_Validator', $this->object['validator']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureValidator()
    {
		$this->object->validator(new Validation_Validator);
		$this->object->validator;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callTable()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->table('tbl1 tbl2'));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetTable()
    {
		
		$this->object->table('tbl1 tbl2');
		$this->assertEquals(array('tbl1','tbl2'), $this->object['table']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureTable()
    {
		$this->object->table('tbl1 tbl2');
		$this->object->table;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callColumns()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->columns(array('col1 col2', 'col3')));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetColumns()
    {
		$this->object->columns(array('col1 col2', 'col3'));
		//var_dump($this->object['columns']);die;
		$this->assertEquals(array('col1 col2', 'col3'), $this->object['columns']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureColumns()
    {
		$this->object->columns('col1', 'col2');
		$this->object->columns;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callExclude()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->exclude(array('col1 col2', 'col3')));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetExclude()
    {
		$this->object->exclude(array('col1 col2', 'col3'));
		$this->assertEquals(array('col1 col2', 'col3'), $this->object['exclude']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureExclude()
    {
		$this->object->exclude(array('col1 col2', 'col3'));
		$this->object->exclude;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callOnly()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->only(array('col1 col2', 'col3')));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetOnly()
    {
		$this->object->only(array('col1 col2', 'col3'));
		$this->assertEquals(array('col1 col2', 'col3'), $this->object['only']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureOnly()
    {
		$this->object->only(array('col1 col2', 'col3'));
		$this->object->only;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callKey()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->key(array('col1 col2', 'col3')));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetKey()
    {
		$this->object->key(array('col1 col2', 'col3'));
		$this->assertEquals(array('col1 col2', 'col3'), $this->object['key']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureKey()
    {
		$this->object->key(array('col1 col2', 'col3'));
		$this->object->key;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callDefaults()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->defaults(array('col1 col2', 'col3')));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetDefaults()
    {
		$this->object->defaults(array('col1 col2', 'col3'));
		$this->assertEquals(array('col1 col2', 'col3'), $this->object['defaults']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureDefaults()
    {
		$this->object->defaults(array('col1 col2', 'col3'));
		$this->object->defaults;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callLookup_by()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->lookup_by('col1 col2'));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetLookup_by()
    {
		$this->object->lookup_by('col1 col2');
		$this->assertEquals('col1 col2', $this->object['lookup_by']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureLookup_by()
    {
		$this->object->lookup_by('col1 col2');
		$this->object->lookup_by;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callSearch_by()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->search_by('col1 col2'));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetSearch_by()
    {
		$this->object->search_by('col1 col2');
		$this->assertEquals('col1 col2', $this->object['search_by']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureSearch_by()
    {
		$this->object->search_by('col1 col2');
		$this->object->search_by;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callExplicit_key()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->explicit_key(true));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetExplicit_key()
    {
		$this->object->explicit_key(true);
		$this->assertTrue($this->object['explicit_key']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureExplicit_key()
    {
		$this->object->explicit_key(true);
		$this->object->explicit_key;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callCalculate()
    {
		$expr = array('MAX(col1, col2)', 'col1 col2', 'col3');
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->calculate($expr));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetCalculate()
    {
		$expr = array('MAX(col1  , col2) as col_max  ', 'col1    as col2', 'col3');
		$this->object->calculate($expr);
		//var_dump($this->object['calculate']);die;
		$expect = array('col_max' => 'MAX(col1  , col2)', 'col2' => 'col1', 'col3' => 'col3');
		$this->assertEquals($expect, $this->object['calculate']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureCalculate()
    {
		$expr = '';
		$this->object->calculate($expr);
		$this->object->calculate;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callHaving()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->having('a = b'));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetHaving()
    {
		$this->object->having('a = b');
		//var_dump($this->object['having']);
		$this->assertEquals(array('a = b'), $this->object['having']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureHaving()
    {
		$this->object->having('a = b');
		$this->object->having;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callWhere()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->where('a = b'));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetWhere()
    {
		$this->object->where('a = b');
		$this->assertEquals(array('a = b'), $this->object['where']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureWhere()
    {
		$this->object->where('a = b');
		$this->object->where;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callOrder_by()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->order_by('col1, col2'));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetOrder_by()
    {
		$this->object->order_by('col1, col2');
		$this->assertEquals('col1, col2', $this->object['order_by']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureOrder_by()
    {
		$this->object->order_by('col1, col2');
		$this->object->order_by;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callGroup_by()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->group_by('col1, col2'));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetGroup_by()
    {
		$this->object->group_by('col1, col2');
		$this->assertEquals('col1, col2', $this->object['group_by']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureGroup_by()
    {
		$this->object->group_by('col1, col2');
		$this->object->group_by;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callJoin()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->join('left', 'tbl1', 'a = b'));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetJoin()
    {
		$this->object->join('left', 'tbl1', 't1.a = b AND c = d');
		//var_dump($this->object['join']);die;
		$this->assertEquals(array(array('left', 'tbl1', array('t1.a = b AND c = d'))), $this->object['join']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureJoin()
    {
		$this->object->join('left', 'tbl1', 'a = b');
		$this->object->join;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callRange()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->range(10,20));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetRange()
    {
		$this->object->range(10,20);
		$this->assertEquals(array(10,20), $this->object['range']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureRange()
    {
		$this->object->range(10,20);
		$this->object->range;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callIndex()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->index('index1'));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetIndex()
    {
		$this->object->index('index1');
		$this->assertEquals('index1', $this->object['index']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureIndex()
    {
		$this->object->index('index1');
		$this->object->index;
    }

    /**
     * @covers DB_ORM_MappingOptions::__call
     * @todo   Implement test__call().
     */
    public function test__callAny()
    {
		$this->assertInstanceOf('DB_ORM_MappingOptions', $this->object->any('any'));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGetAny()
    {
		$this->object->any('any');
		$this->assertEquals('any', $this->object['any']);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test_getFailureAny()
    {
		$this->object->any('any');
		$this->object->any;
    }


    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     */
    public function testOffsetSet()
    {
		$this->object['any_permitted'] = 'any_permitted';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureClassname()
    {
		$this->object['classname'] = 'DB_ORM_MappingOptions';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureTable()
    {
		$this->object['table'] = 'table';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureValidator()
    {
		$this->object['validator'] = new Validation_Validator;
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureColumns()
    {
		$this->object['columns'] = 'columns';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureDefaults()
    {
		$this->object['defaults'] = 'defaults';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureOrder_by()
    {
		$this->object['order_by'] = 'order_by';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureGroup_by()
    {
		$this->object['group_by'] = 'group_by';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureKey()
    {
		$this->object['key'] = 'key';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureExplicit_key()
    {
		$this->object['explicit_key'] = 'explicit_key';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureRange()
    {
		$this->object['range'] = 'range';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureIndex()
    {
		$this->object['index'] = 'index';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureJoin()
    {
		$this->object['join'] = 'join';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureWhere()
    {
		$this->object['where'] = 'where';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureHaving()
    {
		$this->object['having'] = 'having';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureCalculate()
    {
		$this->object['calculate'] = 'calculate';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureExclude()
    {
		$this->object['exclude'] = 'exclude';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureAliased_table()
    {
		$this->object['aliased_table'] = 'aliased_table';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureTable_prefix()
    {
		$this->object['table_prefix'] = 'table_prefix';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureResult()
    {
		$this->object['result'] = 'result';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureLookup_by()
    {
		$this->object['lookup_by'] = 'lookup_by';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureSearch_by()
    {
		$this->object['search_by'] = 'search_by';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetSet
     * @expectedException Core_ReadOnlyIndexedPropertyException
     */
    public function testOffsetSetFailureOnly()
    {
		$this->object['only'] = 'only';
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetExists
     */
    public function testOffsetExists()
    {
		$this->assertFalse(isset($this->object['classname']));
		$this->object->classname('DB_ORM_MappingOptions');
		$this->assertTrue(isset($this->object['classname']));
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetUnset
     * @expectedException Core_UndestroyableIndexedPropertyException
     */
    public function testOffsetUnsetFailureAliased_table()
    {
		unset($this->object['aliased_table']);
	}

    /**
     * @covers DB_ORM_MappingOptions::offsetUnset
     * @expectedException Core_UndestroyableIndexedPropertyException
     */
    public function testOffsetUnsetFailureTable_prefix()
    {
		unset($this->object['table_prefix']);
	}
	
    /**
     * @covers DB_ORM_MappingOptions::offsetUnset
     * @expectedException Core_UndestroyableIndexedPropertyException
     */
    public function testOffsetUnsetFailureResult()
    {
		unset($this->object['result']);
    }

    /**
     * @covers DB_ORM_MappingOptions::offsetUnset
     * @todo   Implement testOffsetUnset().
     */
    public function testOffsetUnset()
    {
		$this->object->classname('DB_ORM_MappingOptions');
		unset($this->object['classname']);
		$this->assertFalse(isset($this->object['classname']));
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     */
    public function test__get()
    {
		$this->assertNull($this->object->parent);
		$this->assertEquals(array(),$this->object->options);
    }

    /**
     * @covers DB_ORM_MappingOptions::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test__getFailure()
    {
		$this->object->any_other;
    }
	
    /**
     * @covers DB_ORM_MappingOptions::get_parent_
     * @todo   Implement testGet_parent_().
     */
    public function testGet_parent_()
    {
		$this->assertNull($this->object->get_parent_());
    }

    /**
     * @covers DB_ORM_MappingOptions::__set
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__setFailureParent()
    {
		unset($this->object->parent);
    }

    /**
     * @covers DB_ORM_MappingOptions::__set
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__setFailureOptions()
    {
		unset($this->object->options);
    }

    /**
     * @covers DB_ORM_MappingOptions::__set
     * @expectedException Core_MissingPropertyException
     */
    public function test__setFailure()
    {
		unset($this->object->any_other);
    }

    /**
     * @covers DB_ORM_MappingOptions::__isset
     * @todo   Implement test__isset().
     * 
     */
    public function test__isset()
    {
		$this->assertTrue(isset($this->object->options));
		$this->assertFalse(isset($this->object->parent));
		$this->assertFalse(isset($this->object->any_other));
    }

    /**
     * @covers DB_ORM_MappingOptions::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureParent()
    {
		unset($this->object->parent);
    }

    /**
     * @covers DB_ORM_MappingOptions::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureOptions()
    {
		unset($this->object->options);
    }

    /**
     * @covers DB_ORM_MappingOptions::__unset
     * @expectedException Core_MissingPropertyException
     */
    public function test__unsetFailure()
    {
		unset($this->object->any_other);
    }
}
