<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-21 at 15:29:54.
 */
class DB_DSNTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var DB_DSN
     */
    protected $object;
    
	protected $parms = array(
		'type'     => 'mysql',
		'user'     => 'root',
		'password' => 'root',
		'host'     => 'localhost',
		'port'     => 3306,
		'database' => 'unittest',
		'scheme'   => 'scheme',
		'parms'    => array(
			'a' => 'b',
			'c' => 'd'
		)
	);

    protected $dsn_correct = 'mysql://root:root@localhost:3306/unittest/scheme?a=b&c=d';

	protected function craftDSN($parms)
	{
		$query = '';
		if (isset($parms['parms']))
		{
			foreach ($parms['parms'] as $k => $v) {
				$query .= $k.'='.$v.'&';
			}
		}
		
		if ($query) {
			$query = substr($query, 0, strlen($query)-1);
		}
		
		$dsn = (isset($parms['type']) ? $parms['type'] : '').'://'.
			(isset($parms['user']) ? $parms['user'] : '').':'.
			(isset($parms['password']) ? $parms['password'] : '').'@'.
			(isset($parms['host']) ? $parms['host'] : '').
			(isset($parms['port']) ? ':'.$parms['port'] : '').'/'.
			(isset($parms['database']) ? $parms['database'] : '').
			(isset($parms['scheme']) ? '/'.$parms['scheme'] : '').
			(($query) ? '?'.$query : '');
		
		return $dsn;
	}

	protected function craftPDO($parms)
	{
		$pdo_string = $parms['type'].
			':host='.$parms['host'].
			';dbname='.$parms['database'].
			(isset($parms['port']) ? ';port='.$parms['port'] : '').
			(isset($parms['scheme']) ? ';scheme='.$parms['scheme'] : '');
			
		return $pdo_string;
	}
	
	protected function compareDSNString($parms)
	{
		$dsn = $this->craftDSN($parms);
		$this->object = DB_DSN::parse($dsn);
		$this->assertEquals($dsn,$this->object->as_string());
	}

	protected function comparePDOString($parms)
	{
		$pdo_string = $this->craftPDO($parms);
		$this->object = DB_DSN::parse($this->craftDSN($parms));
		$this->assertEquals($pdo_string,$this->object->pdo_string);
	}
	
    /**
     * @covers DB_DSN::parse
     */
    public function testParse()
    {
		$this->assertInstanceOf('DB_DSN',DB_DSN::parse($this->craftDSN($this->parms)));
    }

    /**
     * @covers DB_DSN::parse
     * @expectedException DB_ConnectionException
     */
    public function testParseFailureEmpty()
    {
		DB_DSN::parse('');
    }

    /**
     * @covers DB_DSN::parse
     * @expectedException DB_ConnectionException
     */
    public function testParseFailureNotType()
    {
		$parms = $this->parms;
		unset($parms['type']);
		$dsn = $this->craftDSN($parms);
		DB_DSN::parse($dsn);
    }

    /**
     * @covers DB_DSN::parse
     * @expectedException DB_ConnectionException
     */
    public function testParseFailureNotHost()
    {
		$parms = $this->parms;
		unset($parms['host']);
		DB_DSN::parse($this->craftDSN($parms));
    }

    /**
     * @covers DB_DSN::parse
     */
    public function testParseFailureNotDatabase()
    {
		$parms = $this->parms;
		unset($parms['database']);
		$dsn = $this->craftDSN($parms);
		$object = DB_DSN::parse($dsn);
        // If no database but exists scheme use scheme name as database
        $this->assertEquals($parms['scheme'], $object->database);
    }

    /**
     * @covers DB_DSN::as_string
     */
    public function testAs_stringFull()
    {
		$this->compareDSNString($this->parms);
    }

    /**
     * @covers DB_DSN::as_string
     */
    public function testAs_stringShort()
    {
		$parms = $this->parms;
		unset($parms['port']);
		unset($parms['scheme']);
		
		$this->compareDSNString($parms);
    }

    /**
     * @covers DB_DSN::as_string
     */
    public function testAs_stringWithoutPort()
    {
		$parms = $this->parms;
		unset($parms['port']);
		
		$this->compareDSNString($parms);
    }

    /**
     * @covers DB_DSN::as_string
     */
    public function testAs_stringWithoutScheme()
    {
		$parms = $this->parms;
		unset($parms['scheme']);
		
		$this->compareDSNString($parms);
    }

    /**
     * @covers DB_DSN::__toString
     */
    public function test__toString()
    {
        $this->testAs_stringFull();
    }

    /**
     * @covers DB_DSN::__get
     */
    public function test__getFull()
    {
		$this->comparePDOString($this->parms);
    }

    /**
     * @covers DB_DSN::__get
     */
    public function test__getShort()
    {
		$parms = $this->parms;
		unset($parms['port']);
		unset($parms['scheme']);
		
		$this->comparePDOString($parms);
    }

    /**
     * @covers DB_DSN::__get
     */
    public function test__getWithoutPort()
    {
		$parms = $this->parms;
		unset($parms['port']);
		
		$this->comparePDOString($parms);
    }

    /**
     * @covers DB_DSN::__get
     */
    public function test__getWithoutScheme()
    {
		$parms = $this->parms;
		unset($parms['scheme']);
		
		$this->comparePDOString($parms);
    }

    /**
     * @covers DB_DSN::__set
     * @expectedException Core_MissingPropertyException
     */
    public function test__setFailureMissingProperty()
    {
		$this->object = DB_DSN::parse($this->craftDSN($this->parms));
		$this->object->not_exist_property = '';
    }

    /**
     * @covers DB_DSN::__set
     * @expectedException Core_ReadOnlyPropertyException
     */
    public function test__setFailureReadOnlyProperty()
    {
		$this->object = DB_DSN::parse($this->craftDSN($this->parms));
		$this->object->pdo_string = '';
    }

    /**
     * @covers DB_DSN::__set
     */
    public function test__set()
    {
		$parms = $this->parms;
		$this->object = DB_DSN::parse($this->craftDSN($parms));
		$this->object->parms = array('aaaaa');
		$this->comparePDOString($parms);
		$this->compareDSNString($parms);
    }

    /**
     * @covers DB_DSN::__isset
     */
    public function test__isset()
    {
		$this->object = DB_DSN::parse($this->craftDSN($this->parms));
		$this->assertTrue(isset($this->object->type));
		$this->assertTrue(isset($this->object->user));
		$this->assertTrue(isset($this->object->password));
		$this->assertTrue(isset($this->object->host));
		$this->assertTrue(isset($this->object->port));
		$this->assertTrue(isset($this->object->database));
		$this->assertTrue(isset($this->object->pdo_string));
		$this->assertTrue(isset($this->object->scheme));
		$this->assertTrue(isset($this->object->parms));

		$this->assertFalse(isset($this->object->not_exist_property));
    }

    /**
     * @covers DB_DSN::__unset
     * @expectedException Core_MissingPropertyException
     */
    public function test__unsetFailureMissingProperty()
    {
		$this->object = DB_DSN::parse($this->craftDSN($this->parms));
		unset($this->object->not_exist_property);
    }

    /**
     * @covers DB_DSN::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureUndestroyablePropertyType()
    {
		$this->object = DB_DSN::parse($this->craftDSN($this->parms));
		unset($this->object->type);
    }

    /**
     * @covers DB_DSN::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureUndestroyablePropertyUser()
    {
		$this->object = DB_DSN::parse($this->craftDSN($this->parms));
		unset($this->object->user);
    }

    /**
     * @covers DB_DSN::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureUndestroyablePropertyPassword()
    {
		$this->object = DB_DSN::parse($this->craftDSN($this->parms));
		unset($this->object->password);
    }

    /**
     * @covers DB_DSN::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureUndestroyablePropertyHost()
    {
		$this->object = DB_DSN::parse($this->craftDSN($this->parms));
		unset($this->object->host);
    }

    /**
     * @covers DB_DSN::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureUndestroyablePropertyPort()
    {
		$this->object = DB_DSN::parse($this->craftDSN($this->parms));
		unset($this->object->port);
    }

    /**
     * @covers DB_DSN::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureUndestroyablePropertyDatabase()
    {
		$this->object = DB_DSN::parse($this->craftDSN($this->parms));
		unset($this->object->database);
    }

    /**
     * @covers DB_DSN::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureUndestroyablePropertyPdo_string()
    {
		$this->object = DB_DSN::parse($this->craftDSN($this->parms));
		unset($this->object->pdo_string);
    }

    /**
     * @covers DB_DSN::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureUndestroyablePropertyScheme()
    {
		$this->object = DB_DSN::parse($this->craftDSN($this->parms));
		unset($this->object->scheme);
    }

    /**
     * @covers DB_DSN::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureUndestroyablePropertyParms()
    {
		$this->object = DB_DSN::parse($this->craftDSN($this->parms));
		unset($this->object->parms);
    }
}
