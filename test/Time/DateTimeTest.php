<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-22 at 14:34:17.
 */
class Time_DateTimeTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Time_DateTime
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Time_DateTime;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Time_DateTime::setTime
     */
    public function testSetTime()
    {
		$this->assertInstanceOf('Time_DateTime',$this->object->setTime(1000,1000,1000));
		$this->assertInstanceOf('Time_DateTime',$this->object->setTime('a','b','c'));
		$this->assertInstanceOf('Time_DateTime',$this->object->setTime(array('a'),array('b'),array('c')));
    }

    /**
     * @covers Time_DateTime::setDate
     */
    public function testSetDate()
    {
		$this->assertInstanceOf('Time_DateTime',$this->object->setDate(1000,1000,1000));
		$this->assertInstanceOf('Time_DateTime',$this->object->setDate('a','b','c'));
		$this->assertInstanceOf('Time_DateTime',$this->object->setDate(array('a'),array('b'),array('c')));
    }

    /**
     * @covers Time_DateTime::compose
     */
    public function testCompose()
    {
		$this->assertInstanceOf('Time_DateTime',$this->object->compose(1000,1,1));
		$this->assertFalse($this->object->compose(1000,1000,1000));
    }

    /**
     * @covers Time_DateTime::parse_clib
     */
    public function testParse_clib()
    {
		$format = '%d/%m/%Y %H:%M:%S';
		$this->assertInstanceOf('Time_DateTime',$this->object->parse_clib(strftime($format),$format));
		$this->assertInstanceOf('Time_DateTime',$this->object->parse_clib(strftime($format),''));
		$this->assertNull($this->object->parse_clib('',$format));
    }

    /**
     * @covers Time_DateTime::parse
     */
    public function testParse()
    {
		$format_strftime = '%d/%m/%Y %H:%M:%S';
		$format_DateTime = 'Y-m-d H:i:s';
		
		$string_strftime = strftime($format_strftime);
		$string_DateTime = '2009-02-15 15:16:17';
		
		$this->assertNull($this->object->parse(''));
		
		$this->assertInstanceOf('Time_DateTime',$this->object->parse($string_strftime));
		$this->assertInstanceOf('Time_DateTime',$this->object->parse($string_DateTime));

		$this->assertInstanceOf('Time_DateTime',$this->object->parse($string_strftime,$format_strftime));
//		$this->assertInstanceOf('Time_DateTime',$this->object->parse($string_DateTime,$format_strftime));
		$this->assertNull($this->object->parse($string_DateTime,$format_strftime));
		
		//$this->assertInstanceOf('Time_DateTime',$this->object->parse($string_strftime,$format_DateTime));
		$this->assertNull($this->object->parse($string_strftime,$format_DateTime));
		$this->assertInstanceOf('DateTime',$this->object->parse($string_DateTime,$format_DateTime));


		$this->assertInstanceOf('Time_DateTime',$this->object->parse($string_strftime,$format_strftime,true));
		$this->assertNull($this->object->parse($string_strftime,$format_DateTime,true));
		
		$this->assertNull($this->object->parse($string_DateTime,$format_strftime,true));
		$this->assertNull($this->object->parse($string_DateTime,$format_DateTime,true));

    }

    /**
     * @covers Time_DateTime::createFromFormat
     */
	public function testCreateFromFormat()
	{
		$format_strftime = '%d/%m/%Y %H:%M:%S';
		$format_DateTime = 'Y-m-d H:i:s';
		$string_DateTime = '2009-02-15 15:16:17';
		$string_strftime = strftime($format_strftime);
		
		$this->assertInstanceOf('Time_DateTime',$this->object->createFromFormat($format_DateTime, $string_DateTime));
		$this->assertNull($this->object->createFromFormat($format_DateTime, $string_strftime));
	}
	
    /**
     * @covers Time_DateTime::equals
     */
    public function testEquals()
    {
		$this->assertTrue($this->object->equals(new Time_DateTime));
		$this->assertFalse($this->object->equals(new DateTime));
		
		$t = new Time_DateTime;
		$t->add(new DateInterval('P1D'));
		$this->assertFalse($this->object->equals($t));

		$t = new Time_DateTime;
		$t->add(new DateInterval('PT1H'));
		$this->assertFalse($this->object->equals($t));
    }

    /**
     * @covers Time_DateTime::between
     */
    public function testBetween()
    {
		$from = new Time_DateTime;
		$from->sub(new DateInterval('P1D'));
		$to = new Time_DateTime;
		$to->add(new DateInterval('P1D'));
		
		$this->assertTrue($this->object->between($from, $to));
		
		$from->add(new DateInterval('P1D'));
		$this->assertTrue($this->object->between($from, $to));

		$from->add(new DateInterval('P1D'));
		$this->assertFalse($this->object->between($from, $to));
    }

    /**
     * @covers Time_DateTime::earlier_than
     */
    public function testEarlier_than()
    {
		$t = new Time_DateTime;
		$t->add(new DateInterval('P1D'));
		$this->assertTrue($this->object->earlier_than($t));
		
		$t->sub(new DateInterval('P1D'));
		$this->assertFalse($this->object->earlier_than($t));
    }

    /**
     * @covers Time_DateTime::not_earlier_than
     */
    public function testNot_earlier_than()
    {
		$t = new Time_DateTime;
		$this->assertTrue($this->object->not_earlier_than($t));

		$t->sub(new DateInterval('P1D'));
		$this->assertTrue($this->object->not_earlier_than($t));

		$t->add(new DateInterval('P2D'));
		$this->assertFalse($this->object->not_earlier_than($t));
    }

    /**
     * @covers Time_DateTime::later_than
     */
    public function testLater_than()
    {
		$t = new Time_DateTime;
		$this->assertFalse($this->object->later_than($t));

		$t->sub(new DateInterval('P1D'));
		$this->assertTrue($this->object->later_than($t));
    }

    /**
     * @covers Time_DateTime::not_later_than
     */
    public function testNot_later_than()
    {
		$t = new Time_DateTime;
		$this->assertTrue($this->object->not_later_than($t));

		$t->sub(new DateInterval('P1D'));
		$this->assertFalse($this->object->not_later_than($t));

		$t->add(new DateInterval('P2D'));
		$this->assertTrue($this->object->not_later_than($t));
    }

    /**
     * @covers Time_DateTime::same_date_as
     */
    public function testSame_date_as()
    {
		$this->assertTrue($this->object->same_date_as(new Time_DateTime));
		
		$t = new Time_DateTime;
		$t->add(new DateInterval('P1D'));
		$this->assertFalse($this->object->same_date_as($t));

		$t = new Time_DateTime;
		$t->add(new DateInterval('PT1H'));
		$this->assertTrue($this->object->same_date_as($t));
    }

    /**
     * @covers Time_DateTime::is_equal_to
     */
    public function testIs_equal_to()
    {
		$this->assertTrue($this->object->is_equal_to(new Time_DateTime));
		
		$t = new Time_DateTime;
		$t->add(new DateInterval('P1D'));
		$this->assertFalse($this->object->is_equal_to($t));

		$t = new Time_DateTime;
		$t->add(new DateInterval('PT1H'));
		$this->assertFalse($this->object->is_equal_to($t));
    }

    /**
     * @covers Time_DateTime::time_zone_offset
     */
    public function testTime_zone_offset()
    {
		$this->assertEquals(14400,$this->object->time_zone_offset());
    }

    /**
     * @covers Time_DateTime::getTimestamp
     */
    public function testGetTimestamp()
    {
		//$ts = DateTime::getTimestamp();
		$dt = new DateTime;
		$this->assertEquals($dt->getTimestamp(), $this->object->getTimestamp());
		
		$ts = mktime($this->object->hour, 
			$this->object->minute, 
			$this->object->second, 
			$this->object->month, 
			$this->object->day, 
			$this->object->year);
		$this->assertEquals($ts, $this->object->getTimestamp());
    }

    /**
     * @covers Time_DateTime::setTimestamp
     */
    public function testSetTimestamp()
    {
		$ts = $this->object->getTimestamp() + 1000;
		$this->assertInstanceOf('Time_DateTime',$this->object->setTimestamp($ts));
		$this->assertEquals($ts, $this->object->getTimestamp());
    }

    /**
     * @covers Time_DateTime::add_by_timestap
     */
    public function testAdd_by_timestap()
    {
		$second = 1000;

		$ts = mktime($this->object->hour, 
			$this->object->minute, 
			$this->object->second+$second, 
			$this->object->month, 
			$this->object->day, 
			$this->object->year);

		$this->object->add_by_timestap($second);
		$this->assertEquals($ts, $this->object->getTimestamp());
    }

    /**
     * @covers Time_DateTime::add
     */
    public function testAdd()
    {
		$string_interval = 'P2Y4DT6H8M';
		$interval = new DateInterval($string_interval);
		$ts = mktime($this->object->hour+6, 
			$this->object->minute+8, 
			$this->object->second, 
			$this->object->month, 
			$this->object->day+4, 
			$this->object->year+2);
		
		$o1 = $this->object;
		
		$this->assertInstanceOf('Time_DateTime',$o1->add($interval));
		$this->assertEquals($ts,$o1->getTimestamp());
		
		$o1->sub($interval);
		$this->assertInstanceOf('Time_DateTime',$o1->add($string_interval));
		$this->assertEquals($ts,$o1->getTimestamp());
		
		$o1->sub($string_interval);
		$this->assertInstanceOf('Time_DateTime',$o1->add(0, 8, 6, 4, 0, 2));
		$this->assertEquals($ts,$o1->getTimestamp());
    }

    /**
     * @covers Time_DateTime::sub
     */
    public function testSub()
    {
		$string_interval = 'P2Y4DT6H8M';
		$interval = new DateInterval($string_interval);
		$ts = mktime($this->object->hour-6, 
			$this->object->minute-8, 
			$this->object->second, 
			$this->object->month, 
			$this->object->day-4, 
			$this->object->year-2);
		
		$o1 = $this->object;
		
		$this->assertInstanceOf('Time_DateTime',$o1->sub($interval));
		$this->assertEquals($ts,$o1->getTimestamp());
		
		$o1->add($interval);
		$this->assertInstanceOf('Time_DateTime',$o1->sub($string_interval));
		$this->assertEquals($ts,$o1->getTimestamp());
		
		$o1->add($string_interval);
		$this->assertInstanceOf('Time_DateTime',$o1->sub(0, 8, 6, 4, 0, 2));
		$this->assertEquals($ts,$o1->getTimestamp());
    }

    /**
     * @covers Time_DateTime::__get
     */
    public function test__get()
    {
		$this->assertEquals($this->object->timestamp, $this->object->getTimestamp());
		$this->assertEquals($this->object->ts, $this->object->getTimestamp());
		$this->assertEquals($this->object->year, $this->object->format('Y'));
		$this->assertEquals($this->object->month, $this->object->format('n'));
		$this->assertEquals($this->object->day, $this->object->format('j'));
		$this->assertEquals($this->object->hour, $this->object->format('G'));
		$this->assertEquals($this->object->minute, $this->object->format('i'));
		$this->assertEquals($this->object->second, $this->object->format('s'));
		$w = $this->object->format('w');
		$w = ($w == 0) ? 7 : $w;
		$this->assertEquals($this->object->wday, $w);
		$this->assertEquals($this->object->yday, $this->object->format('j'));
    }

    /**
     * @covers Time_DateTime::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test__getFailure()
    {
		$this->object->not_exist;
	}
	
    /**
     * @covers Time_DateTime::__set
     */
    public function test__set()
    {
		$t = time();
		$this->object->timestamp = $t;
		$this->assertEquals($t, $this->object->timestamp);
    }

    /**
     * @covers Time_DateTime::__set
     * @expectedException Core_MissingPropertyException
     */
    public function test__setFailureMissingProperty()
    {
		$this->object->not_exist = '';
    }

    /**
     * @covers Time_DateTime::__set
     * @expectedException Core_ReadOnlyPropertyException
     */
    public function test__setFailureYearReadOnlyProperty()
    {
		$this->object->year = 2000;
    }

    /**
     * @covers Time_DateTime::__set
     * @expectedException Core_ReadOnlyPropertyException
     */
    public function test__setFailureMonthReadOnlyProperty()
    {
		$this->object->month = 2;
    }
    
    /**
     * @covers Time_DateTime::__set
     * @expectedException Core_ReadOnlyPropertyException
     */
    public function test__setFailureDayReadOnlyProperty()
    {
		$this->object->day = 2;
    }
    
    /**
     * @covers Time_DateTime::__set
     * @expectedException Core_ReadOnlyPropertyException
     */
    public function test__setFailureHourReadOnlyProperty()
    {
		$this->object->hour = 2;
    }
    
    /**
     * @covers Time_DateTime::__set
     * @expectedException Core_ReadOnlyPropertyException
     */
    public function test__setFailureMinuteReadOnlyProperty()
    {
		$this->object->minute = 20;
    }
    
    /**
     * @covers Time_DateTime::__set
     * @expectedException Core_ReadOnlyPropertyException
     */
    public function test__setFailureSecondReadOnlyProperty()
    {
		$this->object->second = 20;
    }
    
    /**
     * @covers Time_DateTime::__set
     * @expectedException Core_ReadOnlyPropertyException
     */
    public function test__setFailureWdayReadOnlyProperty()
    {
		$this->object->wday = 2;
    }
    
    /**
     * @covers Time_DateTime::__set
     * @expectedException Core_ReadOnlyPropertyException
     */
    public function test__setFailureYdayReadOnlyProperty()
    {
		$this->object->yday = 20;
    }

    /**
     * @covers Time_DateTime::__isset
     */
    public function test__isset()
    {
		$this->assertTrue(isset($this->object->timestamp));
		$this->assertTrue(isset($this->object->year));
		$this->assertTrue(isset($this->object->month));
		$this->assertTrue(isset($this->object->day));
		$this->assertTrue(isset($this->object->hour));
		$this->assertTrue(isset($this->object->minute));
		$this->assertTrue(isset($this->object->second));
		$this->assertTrue(isset($this->object->wday));
		$this->assertTrue(isset($this->object->yday));
		$this->assertFalse(isset($this->object->not_exist));
    }

 
     /**
     * @covers Time_DateTime::__unset
     * @expectedException Core_MissingPropertyException
     */
    public function test__unsetFailureMissingProperty()
    {
		unset($this->object->not_exist);
    }

    /**
     * @covers Time_DateTime::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureYearReadOnlyProperty()
    {
		unset($this->object->year);
    }

    /**
     * @covers Time_DateTime::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureMonthReadOnlyProperty()
    {
		unset($this->object->month);
    }
    
    /**
     * @covers Time_DateTime::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureDayReadOnlyProperty()
    {
		unset($this->object->day);
    }
    
    /**
     * @covers Time_DateTime::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureHourReadOnlyProperty()
    {
		unset($this->object->hour);
    }
    
    /**
     * @covers Time_DateTime::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureMinuteReadOnlyProperty()
    {
		unset($this->object->minute);
    }
    
    /**
     * @covers Time_DateTime::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureSecondReadOnlyProperty()
    {
		unset($this->object->second);
    }
    
    /**
     * @covers Time_DateTime::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureWdayReadOnlyProperty()
    {
		unset($this->object->wday);
    }
    
    /**
     * @covers Time_DateTime::__unset
     * @expectedException Core_UndestroyablePropertyException
     */
    public function test__unsetFailureYdayReadOnlyProperty()
    {
		unset($this->object->yday);
    }

    /**
     * @covers Time_DateTime::format_clib
     */
    public function testFormat_clib()
    {
		$format = Time::FMT_DEFAULT;
		$s = strftime($format, $this->object->ts);
		$this->assertEquals($s, $this->object->format_clib());
    }

    /**
     * @covers Time_DateTime::format
     */
    public function testFormat()
    {
		$d = '2011-09-11 12:10:11';
		$d_clib = '11/09/2011 12:10:11';
		$format_DateTime = 'Y-m-d H:i:s';
		$format_strftime = '%d/%m/%Y %H:%M:%S';
		$this->object = Time::DateTime($d);

		$this->assertEquals($d, $this->object->format($format_DateTime));
		$this->assertEquals($d_clib, $this->object->format($format_strftime));

		$this->assertEquals($d, $this->object->format($format_DateTime, false));
		$this->assertEquals($d_clib, $this->object->format($format_strftime, true));
    }

    /**
     * @covers Time_DateTime::format_l10n
     */
    public function testFormat_l10n()
    {
        $date = Time::DateTime('01-02-2013');
        $this->assertEquals("01 февраля", $date->format_l10n('%d %B', 'ru'));
    }

    /**
     * @covers Time_DateTime::as_rfc1123
     */
    public function testAs_rfc1123()
    {
		$d = '2011-09-11 12:10:11';
		$rfc1123 = 'Sun, 11 Sep 2011 12:10:11 +0400';
		$this->object = Time::DateTime($d);
		
		$this->assertEquals($rfc1123, $this->object->as_rfc1123());
    }

    /**
     * @covers Time_DateTime::as_string
     */
    public function testAs_string()
    {
		$this->testFormat();
    }

    /**
     * @covers Time_DateTime::__toString
     */
    public function test__toString()
    {
		$this->testAs_string();
    }
    
    /**
     * @covers Time_DateTime::s2date
     */
	public function testS2date()
	{
		$format_dmy = 'd.m.Y';
		$string_dmy = '11.09.2011';
		
		$date = Time_DateTime::parse($string_dmy, $format_dmy);
		$date->setTime(0, 0, 0);
		$this->assertEquals($date->ts, Time_DateTime::s2date($string_dmy));
		
		$format_dmy_Gi = 'd.m.Y - G:i';
		$string_dmy_Gi = '11.09.2011 - 12:10';
		$date = Time_DateTime::parse($string_dmy_Gi, $format_dmy_Gi);
		//$this->assertEquals(1315728600, $date->ts);
		$this->assertEquals($date->ts, Time_DateTime::s2date($string_dmy_Gi));

		$format_dmy_Gis = 'd.m.Y - G:i:s';
		$string_dmy_Gis = '11.09.2011 - 12:10:11';
		$date = Time_DateTime::parse($string_dmy_Gis, $format_dmy_Gis);
		$this->assertEquals($date->ts, Time_DateTime::s2date($string_dmy_Gis));
		
		$this->assertEquals(0, Time_DateTime::s2date(''));
	}

    /**
     * @covers Time_DateTime::datetime2timestamp
     */
	public function testDatetime2timestamp()
	{
		$format_dmy = 'd.m.Y';
		$string_dmy = '11.09.2011';
		$date = Time_DateTime::parse($string_dmy, $format_dmy);
        $date->setTime(0, 0, 0);
		$this->assertEquals($date->ts, Time_DateTime::datetime2timestamp($string_dmy));

		$format_dmy_Gi = 'd.m.Y - G:i';
		$string_dmy_Gi = '11.09.2011 - 12:10';
		$date = Time_DateTime::parse($string_dmy_Gi, $format_dmy_Gi);
		$this->assertEquals($date->ts,  Time_DateTime::datetime2timestamp($string_dmy_Gi));

		$format_dmy_Gis = 'd.m.Y - G:i:s';
		$string_dmy_Gis = '11.09.2011 - 12:10:11';
		$date = Time_DateTime::parse($string_dmy_Gis, $format_dmy_Gis);
		//var_dump($date->ts);
		$this->assertEquals($date->ts, Time_DateTime::datetime2timestamp($string_dmy_Gis));
		
		$string = '11-09-2011 12:10:11';
		$date = Time_DateTime::parse($string);
		//var_dump($date->ts);
		$this->assertEquals($date->ts, Time_DateTime::datetime2timestamp($string));
		
		$this->assertEquals(0, Time_DateTime::datetime2timestamp(''));
	}
	
    /**
     * @covers Time_DateTime::s2sqldate
     */
	public function testS2sqldate()
	{
		$format_dmy = 'd.m.Y';
		$this->assertEquals('1900-01-01',Time_DateTime::s2sqldate($format_dmy));
		
		$format_dmy_Gi = 'd.m.Y - G:i';
		$this->assertEquals('1900-01-01',Time_DateTime::s2sqldate($format_dmy_Gi));

		$format_dmy_Gis = 'd.m.Y - G:i:s';
		$this->assertEquals('1900-01-01',Time_DateTime::s2sqldate($format_dmy_Gis));
		
		$this->assertEquals('0000-00-00',Time_DateTime::s2sqldate(''));
	}

}
