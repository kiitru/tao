<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-05 at 12:29:38.
 */
class Validation_ValidatorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Validation_Validator
     */
    protected $object;

	/**
	 * @var string Имя атрибута
	 */
	protected $attribute = 'attr_name';
	
	/**
	 * @var string Сообщение об ошибке
	 */
	protected $message = 'Error message';
    

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Validation_Validator;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }


    /**
     * @covers Validation_Validator::__call
     * @todo   Implement test__call().
     */
    public function test__call()
    {
		$this->assertInstanceOf(
			'Validation_Validator',
			$this->object->validate_presence_of($this->attribute, $this->message)
		);
		
		$this->assertInstanceOf(
			'Validation_Validator',
			$this->object->validate_format_of($this->attribute, '/.*/', $this->message)
		);

		$this->assertInstanceOf(
			'Validation_Validator',
			$this->object->validate_numericality_of($this->attribute, $this->message)
		);

		$this->assertInstanceOf(
			'Validation_Validator',
			$this->object->validate_inclusion_of($this->attribute, array(), $this->message)
		);
		
		$this->assertInstanceOf(
			'Validation_Validator',
			$this->object->validate_range_of($this->attribute, 1, 11, $this->message)
		);

		$this->assertInstanceOf(
			'Validation_Validator',
			$this->object->validate_confirmation_of($this->attribute, $this->attribute, $this->message)
		);

		$this->assertInstanceOf(
			'Validation_Validator',
			$this->object->validate_email_for($this->attribute, $this->message)
		);
		
		/*
		$this->assertInstanceOf(
			'Validation_Validator',
			$this->object->validate_content_type_of()
		);
		*/

		//var_dump($this->object);
    }

    /**
     * @covers Validation_Validator::__get
     */
    public function test__get()
    {
		$this->assertInstanceOf('Validation_Errors',$this->object->errors);
		$this->assertInstanceOf('ArrayObject',$this->object->global_errors);
		$this->assertInstanceOf('ArrayObject',$this->object->property_errors);
    }

    /**
     * @covers Validation_Validator::__get
     * @expectedException Core_MissingPropertyException
     */
    public function test__getFailure()
    {
		$this->object->not_exist;
	}
	
    /**
     * @covers Validation_Validator::is_invalid
     * @covers Validation_Validator::is_valid
     */
    public function testIs_invalid()
    {
		$correct_value = 'aaaa';
		$empty_value = '';
		$validator = $this->object->validate_presence_of($this->attribute, $this->message);
		
		$validator->validate((object) array($this->attribute => $correct_value));
		$this->assertFalse($validator->is_invalid());
		$this->assertTrue($validator->is_valid());

		$this->assertFalse($validator->is_invalid($this->attribute));
		$this->assertTrue($validator->is_valid($this->attribute));
		
		$validator->validate((object) array($this->attribute => $empty_value));
		$this->assertTrue($validator->is_invalid());
		$this->assertFalse($validator->is_valid());

		$this->assertTrue($validator->is_invalid($this->attribute));
		$this->assertFalse($validator->is_valid($this->attribute));
    }

    /**
     * @covers Validation_Validator::validate
     */
    public function testValidate()
    {
		$correct_value = 'aaaa';
		$empty_value = '';
		$validator = $this->object->validate_presence_of($this->attribute, $this->message);
		
		$this->assertTrue($validator->validate((object) array($this->attribute => $correct_value)));
		$this->assertFalse($validator->validate((object) array($this->attribute => $empty_value)));
    }

    /**
     * @covers Validation_Validator::__set
     * @expectedException Core_ReadOnlyObjectException
     */
    public function test__setFailure()
    {
		$this->object->not_exist = 'aaaa';
    }

    /**
     * @covers Validation_Validator::__isset
     */
    public function test__isset()
    {
		$this->assertTrue(isset($this->object->errors));
		$this->assertTrue(isset($this->object->global_errors));
		$this->assertTrue(isset($this->object->property_errors));
		$this->assertFalse(isset($this->object->not_exist));
    }

    /**
     * @covers Validation_Validator::__unset
     * @expectedException Core_ReadOnlyObjectException
     */
    public function test__unset()
    {
		unset($this->object->errors);
    }
}
