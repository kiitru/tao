<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-05 at 12:30:14.
 */
class Validation_ErrorsTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Validation_Errors
     */
    protected $object;
	protected $message;
	protected $property;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
		$this->message = 'Error # 1';
		$this->property = 'property_1';
        $this->object = new Validation_Errors;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @expectedException Core_MissingPropertyException
     * @covers Validation_Errors::__get
     */
    public function test__getFailure()
    {
		$this->object->aaaa;
    }

    /**
     * @covers Validation_Errors::reject
     * @covers Validation_Errors::__get
     */
    public function testReject()
    {
		$this->assertInstanceOf('Validation_Errors',$this->object->reject($this->message));
		$this->assertEquals(new ArrayObject(array($this->message)),$this->object->global_errors);
    }

    /**
     * @covers Validation_Errors::reject_value
     * @covers Validation_Errors::__get
     */
    public function testReject_value()
    {
		$this->assertInstanceOf('Validation_Errors',$this->object->reject_value($this->property, $this->message));
		$this->assertEquals(new ArrayObject(array($this->property => $this->message)),$this->object->property_errors);
    }

    /**
     * @covers Validation_Errors::has_errors
     */
    public function testHas_errors()
    {
		$this->assertFalse($this->object->has_errors());
		$this->object->reject($this->message);
		$this->assertTrue($this->object->has_errors());
		
		$object = new Validation_Errors;
		$this->assertFalse($object->has_errors());
		$object->reject_value($this->property, $this->message);
		$this->assertTrue($object->has_errors());
    }

    /**
     * @covers Validation_Errors::has_error_for
     */
    public function testHas_error_for()
    {
		$this->assertFalse($this->object->has_error_for($this->property));
		$this->assertInstanceOf('Validation_Errors',$this->object->reject_value($this->property, $this->message));
		$this->assertTrue($this->object->has_error_for($this->property));
    }


    /**
     * @covers Validation_Errors::__set
     * @expectedException Core_ReadOnlyObjectException
     */
    public function test__set()
    {
		$this->object->aaaa = $this->message;
    }

    /**
     * @covers Validation_Errors::__isset
     */
    public function test__isset()
    {
		$this->assertTrue(isset($this->object->global_errors));
		$this->assertTrue(isset($this->object->property_errors));
		$this->assertFalse(isset($this->object->aaaa));
    }

    /**
     * @covers Validation_Errors::__unset
     * @expectedException Core_ReadOnlyObjectException
     */
    public function test__unset()
    {
		$this->object->aaaa = $this->message;
    }
}
